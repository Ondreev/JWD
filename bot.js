const { Telegraf, Markup, session } = require('telegraf');
const { Redis } = require('@upstash/redis');
const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN || '8111751981:AAGZZZzrOu2tdKWm6xhQvquBh2_viQRXCMk';
const GROUP_ID = process.env.GROUP_ID || '-1002665972722';
const REDIS_URL = process.env.UPSTASH_REDIS_REST_URL || 'https://gusc1-star-chow-30378.upstash.io';
const REDIS_TOKEN = process.env.UPSTASH_REDIS_REST_TOKEN || 'AXaqASQgYWMyNTUxZmMtMDYxZS00YTRlLThlNjAtYTc5YWY5MTMwY2QyMDdiNTM2NDc0ZTEzNDU2OTk5ZGFiNDY1MzA1N2E2MTQ=';

// URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const WEBAPP_URL = 'https://flourishing-cuchufli-5b4d4c.netlify.app';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
const redis = new Redis({
  url: REDIS_URL,
  token: REDIS_TOKEN,
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// Middleware –¥–ª—è —Å–µ—Å—Å–∏–π
bot.use(session());

// –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const ADMIN_IDS = [1922996803, 530258581, 6418671958];

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async function isAdmin(userId) {
  try {
    const admins = await redis.get('admins') || [];
    return ADMIN_IDS.includes(userId) || admins.includes(userId);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
    return ADMIN_IDS.includes(userId);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Redis
async function initRedis() {
  try {
    const admins = await redis.get('admins');
    if (!admins) {
      await redis.set('admins', ADMIN_IDS);
    }

    const minItems = await redis.get('minItems');
    if (!minItems) {
      await redis.set('minItems', 1);
    }

    const productCounter = await redis.get('productCounter');
    if (!productCounter) {
      await redis.set('productCounter', 0);
    }

    console.log('Redis –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Redis:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function createMainMenu(isUserAdmin, chatType) {
  const buttons = [];
  
  if (chatType === 'private') {
    // –í –ª–∏—á–∫–µ - web_app –∫–Ω–æ–ø–∫–∞
    buttons.push([Markup.button.webApp('üõí –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã', WEBAPP_URL)]);
  } else {
    // –í –≥—Ä—É–ø–ø–µ - –æ–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞-—Å—Å—ã–ª–∫–∞
    buttons.push([Markup.button.url('üõí –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã', WEBAPP_URL)]);
  }
  
  if (isUserAdmin && chatType === 'private') {
    buttons.push([Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]);
  }
  
  return Markup.inlineKeyboard(buttons);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω –º–µ–Ω—é
function createAdminMenu() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', 'add_product')],
    [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä', 'edit_product')],
    [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', 'delete_product')],
    [Markup.button.callback('üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', 'list_products')],
    [Markup.button.callback('‚öôÔ∏è –ú–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'set_min_items')],
    [Markup.button.callback('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏', 'manage_admins')],
    [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')],
  ]);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
function createAdminManagementKeyboard() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', 'add_admin')],
    [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞', 'delete_admin')],
    [Markup.button.callback('üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤', 'list_admins')],
    [Markup.button.callback('üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')],
  ]);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
function createEditProductKeyboard() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('üìù –ù–∞–∑–≤–∞–Ω–∏–µ', 'edit_name')],
    [Markup.button.callback('üí∞ –¶–µ–Ω–∞', 'edit_price')],
    [Markup.button.callback('üì∑ –§–æ—Ç–æ', 'edit_photo')],
    [Markup.button.callback('üî• –ê–∫—Ü–∏—è', 'edit_promo')],
    [Markup.button.callback('üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')],
  ]);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–∞/–Ω–µ—Ç
function createYesNoKeyboard(action, id) {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback('‚úÖ –î–∞', `${action}_yes_${id}`),
      Markup.button.callback('‚ùå –ù–µ—Ç', `${action}_no_${id}`),
    ],
  ]);
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  try {
    const userId = ctx.from.id;
    const chatType = ctx.chat.type;
    const isUserAdmin = await isAdmin(userId);

    if (chatType === 'private') {
      if (isUserAdmin) {
        await ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –º–∏–Ω–∏-–º–∞–≥–∞–∑–∏–Ω–µ.', createMainMenu(true, chatType));
      } else {
        await ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∏–Ω–∏-–º–∞–≥–∞–∑–∏–Ω!', createMainMenu(false, chatType));
      }
    } else {
      await ctx.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∏–Ω–∏-–º–∞–≥–∞–∑–∏–Ω!', createMainMenu(false, chatType));
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
bot.action('main_menu', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const chatType = ctx.chat.type;
    const isUserAdmin = await isAdmin(userId);

    await ctx.answerCbQuery();
    await ctx.editMessageText('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', createMainMenu(isUserAdmin, chatType));
    ctx.session = null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ main_menu:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"
bot.action('admin_panel', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const isUserAdmin = await isAdmin(userId);

    if (!isUserAdmin) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.');
      return;
    }

    await ctx.answerCbQuery();
    await ctx.editMessageText('‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:', createAdminMenu());
    ctx.session = null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ admin_panel:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"
bot.action('add_product', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const isUserAdmin = await isAdmin(userId);

    if (!isUserAdmin) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }

    await ctx.answerCbQuery();
    ctx.session = { action: 'add_product' };
    await ctx.editMessageText('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ add_product:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä"
bot.action('edit_product', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const isUserAdmin = await isAdmin(userId);

    if (!isUserAdmin) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }

    await ctx.answerCbQuery();
    
    const products = await redis.get('products') || [];
    
    if (products.length === 0) {
      await ctx.editMessageText('üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã.', createAdminMenu());
      return;
    }
    
    let message = '‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n';
    products.forEach(product => {
      message += `üÜî ${product.id} - ${product.name} - ${product.price} —Ä—É–±.\n`;
    });
    
    ctx.session = { action: 'edit_product' };
    await ctx.editMessageText(message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ edit_product:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"
bot.action('delete_product', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const isUserAdmin = await isAdmin(userId);

    if (!isUserAdmin) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }

    await ctx.answerCbQuery();
    
    const products = await redis.get('products') || [];
    
    if (products.length === 0) {
      await ctx.editMessageText('üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã.', createAdminMenu());
      return;
    }
    
    let message = 'üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n';
    products.forEach(product => {
      message += `üÜî ${product.id} - ${product.name} - ${product.price} —Ä—É–±.\n`;
    });
    
    ctx.session = { action: 'delete_product' };
    await ctx.editMessageText(message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ delete_product:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"
bot.action('list_products', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const isUserAdmin = await isAdmin(userId);

    if (!isUserAdmin) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }

    await ctx.answerCbQuery();
    
    const products = await redis.get('products') || [];
    
    if (products.length === 0) {
      await ctx.editMessageText('üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.', createAdminMenu());
      return;
    }
    
    let message = 'üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n';
    products.forEach(product => {
      message += `üÜî ID: ${product.id}\n`;
      message += `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${product.name}\n`;
      message += `üí∞ –¶–µ–Ω–∞: ${product.price} —Ä—É–±.\n`;
      message += `üî• –ê–∫—Ü–∏—è: ${product.promo ? '–î–∞' : '–ù–µ—Ç'}\n\n`;
    });
    
    await ctx.editMessageText(message, createAdminMenu());
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ list_products:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
bot.action('set_min_items', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const isUserAdmin = await isAdmin(userId);

    if (!isUserAdmin) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }

    await ctx.answerCbQuery();
    
    const minItems = await redis.get('minItems') || 1;
    
    ctx.session = { action: 'set_min_items' };
    await ctx.editMessageText(`‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: ${minItems}\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ set_min_items:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏"
bot.action('manage_admins', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const isUserAdmin = await isAdmin(userId);

    if (!isUserAdmin) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }

    await ctx.answerCbQuery();
    await ctx.editMessageText('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:', createAdminManagementKeyboard());
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ manage_admins:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"
bot.action('add_admin', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const isUserAdmin = await isAdmin(userId);

    if (!isUserAdmin) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }

    await ctx.answerCbQuery();
    ctx.session = { action: 'add_admin' };
    await ctx.editMessageText('üë§ –í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ add_admin:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞"
bot.action('delete_admin', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const isUserAdmin = await isAdmin(userId);

    if (!isUserAdmin) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }

    await ctx.answerCbQuery();
    
    const admins = await redis.get('admins') || [];
    
    if (admins.length === 0) {
      await ctx.editMessageText('üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.', createAdminManagementKeyboard());
      return;
    }
    
    let message = 'üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n';
    admins.forEach(admin => {
      message += `üë§ ID: ${admin}\n`;
    });
    
    ctx.session = { action: 'delete_admin' };
    await ctx.editMessageText(message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ delete_admin:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"
bot.action('list_admins', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const isUserAdmin = await isAdmin(userId);

    if (!isUserAdmin) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }

    await ctx.answerCbQuery();
    
    const admins = await redis.get('admins') || [];
    
    if (admins.length === 0) {
      await ctx.editMessageText('üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.', createAdminManagementKeyboard());
      return;
    }
    
    let message = 'üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n';
    admins.forEach(admin => {
      message += `üë§ ID: ${admin}\n`;
    });
    
    await ctx.editMessageText(message, createAdminManagementKeyboard());
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ list_admins:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
bot.action(/edit_(name|price|photo|promo)/, async (ctx) => {
  try {
    const userId = ctx.from.id;
    const isUserAdmin = await isAdmin(userId);

    if (!isUserAdmin) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }

    await ctx.answerCbQuery();
    
    const field = ctx.match[1];
    
    if (!ctx.session.productId) {
      await ctx.editMessageText('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.', createAdminMenu());
      return;
    }
    
    ctx.session.editField = field;
    
    switch (field) {
      case 'name':
        await ctx.editMessageText('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
        break;
      case 'price':
        await ctx.editMessageText('üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:');
        break;
      case 'photo':
        await ctx.editMessageText('üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞:');
        break;
      case 'promo':
        await ctx.editMessageText('üî• –°–¥–µ–ª–∞—Ç—å —Ç–æ–≤–∞—Ä –∞–∫—Ü–∏–æ–Ω–Ω—ã–º?', createYesNoKeyboard('promo', ctx.session.productId));
        break;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–∞/–Ω–µ—Ç –¥–ª—è –∞–∫—Ü–∏–∏
bot.action(/promo_(yes|no)_(\d+)/, async (ctx) => {
  try {
    const userId = ctx.from.id;
    const isUserAdmin = await isAdmin(userId);

    if (!isUserAdmin) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }

    await ctx.answerCbQuery();
    
    const answer = ctx.match[1];
    const productId = parseInt(ctx.match[2]);
    
    const products = await redis.get('products') || [];
    const productIndex = products.findIndex(product => product.id === productId);
    
    if (productIndex === -1) {
      await ctx.editMessageText('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.', createAdminMenu());
      return;
    }
    
    products[productIndex].promo = answer === 'yes';
    await redis.set('products', products);
    
    await ctx.editMessageText(`‚úÖ –¢–æ–≤–∞—Ä ${products[productIndex].name} ${answer === 'yes' ? '—Ç–µ–ø–µ—Ä—å –∞–∫—Ü–∏–æ–Ω–Ω—ã–π' : '–±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ü–∏–æ–Ω–Ω—ã–π'}.`, createAdminMenu());
    ctx.session = null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –¥–∞/–Ω–µ—Ç –¥–ª—è –∞–∫—Ü–∏–∏:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–∞/–Ω–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
bot.action(/delete_(yes|no)_(\d+)/, async (ctx) => {
  try {
    const userId = ctx.from.id;
    const isUserAdmin = await isAdmin(userId);

    if (!isUserAdmin) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }

    await ctx.answerCbQuery();
    
    const answer = ctx.match[1];
    const productId = parseInt(ctx.match[2]);
    
    if (answer === 'no') {
      await ctx.editMessageText('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', createAdminMenu());
      ctx.session = null;
      return;
    }
    
    const products = await redis.get('products') || [];
    const productIndex = products.findIndex(product => product.id === productId);
    
    if (productIndex === -1) {
      await ctx.editMessageText('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.', createAdminMenu());
      return;
    }
    
    const deletedProduct = products.splice(productIndex, 1)[0];
    await redis.set('products', products);
    
    await ctx.editMessageText(`‚úÖ –¢–æ–≤–∞—Ä ${deletedProduct.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`, createAdminMenu());
    ctx.session = null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –¥–∞/–Ω–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–±–æ—Ä–∫—É"
bot.action(/assemble_(\d+)/, async (ctx) => {
  try {
    const userId = ctx.from.id;
    const isUserAdmin = await isAdmin(userId);

    if (!isUserAdmin) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }

    await ctx.answerCbQuery('‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–±–æ—Ä–∫—É!');
    
    const orderId = ctx.match[1];
    const order = await redis.get(`order:${orderId}`);
    
    if (!order) {
      await ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    
    order.status = 'assembling';
    await redis.set(`order:${orderId}`, order);
    
    await ctx.editMessageText(ctx.update.callback_query.message.text + '\n\nüü¢ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–±–æ—Ä–∫—É!');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–±–æ—Ä–∫—É":', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const chatType = ctx.chat.type;
    const isUserAdmin = await isAdmin(userId);
    const text = ctx.message.text;

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ª–∏—á–∫–∞ –∏–ª–∏ –Ω–µ –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (chatType !== 'private' || !isUserAdmin) {
      if (chatType === 'private') {
        await ctx.reply('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', createMainMenu(isUserAdmin, chatType));
      }
      return;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    if (ctx.session?.action === 'add_product' && !ctx.session.product) {
      ctx.session.product = { name: text };
      await ctx.reply('üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ä—É–±.):');
      return;
    }
    
    if (ctx.session?.action === 'add_product' && ctx.session.product && !ctx.session.product.price) {
      const price = parseFloat(text);
      
      if (isNaN(price) || price <= 0) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):');
        return;
      }
      
      ctx.session.product.price = price;
      await ctx.reply('üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞:');
      return;
    }
    
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    if (ctx.session?.action === 'edit_product' && !ctx.session.productId) {
      const productId = parseInt(text);
      
      if (isNaN(productId)) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞ (—á–∏—Å–ª–æ):');
        return;
      }
      
      const products = await redis.get('products') || [];
      const product = products.find(product => product.id === productId);
      
      if (!product) {
        await ctx.reply('‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
        return;
      }
      
      ctx.session.productId = productId;
      await ctx.reply(`‚úÖ –í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: ${product.name}\n\n‚úèÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?`, createEditProductKeyboard());
      return;
    }
    
    if (ctx.session?.action === 'edit_product' && ctx.session.productId && ctx.session.editField) {
      const products = await redis.get('products') || [];
      const productIndex = products.findIndex(product => product.id === ctx.session.productId);
      
      if (productIndex === -1) {
        await ctx.reply('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.', createAdminMenu());
        ctx.session = null;
        return;
      }
      
      switch (ctx.session.editField) {
        case 'name':
          products[productIndex].name = text;
          await ctx.reply(`‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "${text}".`, createAdminMenu());
          break;
        case 'price':
          const price = parseFloat(text);
          
          if (isNaN(price) || price <= 0) {
            await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):');
            return;
          }
          
          products[productIndex].price = price;
          await ctx.reply(`‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${price} —Ä—É–±.`, createAdminMenu());
          break;
      }
      
      await redis.set('products', products);
      ctx.session = null;
      return;
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    if (ctx.session?.action === 'delete_product' && !ctx.session.productId) {
      const productId = parseInt(text);
      
      if (isNaN(productId)) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞ (—á–∏—Å–ª–æ):');
        return;
      }
      
      const products = await redis.get('products') || [];
      const product = products.find(product => product.id === productId);
      
      if (!product) {
        await ctx.reply('‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
        return;
      }
      
      ctx.session.productId = productId;
      await ctx.reply(`üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä "${product.name}"?`, createYesNoKeyboard('delete', productId));
      return;
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
    if (ctx.session?.action === 'set_min_items') {
      const minItems = parseInt(text);
      
      if (isNaN(minItems) || minItems <= 0) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):');
        return;
      }
      
      await redis.set('minItems', minItems);
      await ctx.reply(`‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${minItems}`, createAdminMenu());
      ctx.session = null;
      return;
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (ctx.session?.action === 'add_admin') {
      const adminId = parseInt(text);
      
      if (isNaN(adminId)) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—á–∏—Å–ª–æ):');
        return;
      }
      
      const admins = await redis.get('admins') || [];
      
      if (admins.includes(adminId)) {
        await ctx.reply('‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.', createAdminManagementKeyboard());
        ctx.session = null;
        return;
      }
      
      admins.push(adminId);
      await redis.set('admins', admins);
      
      await ctx.reply(`‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID ${adminId} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`, createAdminManagementKeyboard());
      ctx.session = null;
      return;
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (ctx.session?.action === 'delete_admin') {
      const adminId = parseInt(text);
      
      if (isNaN(adminId)) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—á–∏—Å–ª–æ):');
        return;
      }
      
      const admins = await redis.get('admins') || [];
      const adminIndex = admins.indexOf(adminId);
      
      if (adminIndex === -1) {
        await ctx.reply('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.', createAdminManagementKeyboard());
        ctx.session = null;
        return;
      }
      
      if (adminId === userId) {
        await ctx.reply('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.', createAdminManagementKeyboard());
        ctx.session = null;
        return;
      }
      
      admins.splice(adminIndex, 1);
      await redis.set('admins', admins);
      
      await ctx.reply(`‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID ${adminId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`, createAdminManagementKeyboard());
      ctx.session = null;
      return;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await ctx.reply('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', createMainMenu(isUserAdmin, chatType));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
bot.on('photo', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const isUserAdmin = await isAdmin(userId);

    if (!isUserAdmin) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.');
      return;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    if (ctx.session?.action === 'add_product' && ctx.session.product && ctx.session.product.price) {
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      const fileId = photo.file_id;
      
      let productCounter = await redis.get('productCounter') || 0;
      productCounter++;
      
      const newProduct = {
        id: productCounter,
        name: ctx.session.product.name,
        price: ctx.session.product.price,
        photo: fileId,
        promo: false,
      };
      
      const products = await redis.get('products') || [];
      products.push(newProduct);
      
      await redis.set('products', products);
      await redis.set('productCounter', productCounter);
      
      await ctx.reply(`‚úÖ –¢–æ–≤–∞—Ä "${newProduct.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`, createAdminMenu());
      ctx.session = null;
      return;
    }
    
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    if (ctx.session?.action === 'edit_product' && ctx.session.productId && ctx.session.editField === 'photo') {
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      const fileId = photo.file_id;
      
      const products = await redis.get('products') || [];
      const productIndex = products.findIndex(product => product.id === ctx.session.productId);
      
      if (productIndex === -1) {
        await ctx.reply('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.', createAdminMenu());
        ctx.session = null;
        return;
      }
      
      products[productIndex].photo = fileId;
      await redis.set('products', products);
      
      await ctx.reply('‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.', createAdminMenu());
      ctx.session = null;
      return;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ Telegram Web App
bot.on('message', async (ctx) => {
  try {
    if (ctx.message.web_app_data) {
      const data = JSON.parse(ctx.message.web_app_data.data);
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App:', data);
      
      let orderCounter = await redis.get('orderCounter') || 0;
      orderCounter++;
      
      const newOrder = {
        id: orderCounter,
        userId: ctx.from.id,
        userName: ctx.from.first_name,
        items: data.items,
        totalPrice: data.totalPrice,
        customerName: data.customerName,
        customerPhone: data.customerPhone,
        customerAddress: data.customerAddress,
        customerComment: data.customerComment,
        status: 'new',
        createdAt: new Date().toISOString(),
      };

      await redis.set(`order:${orderCounter}`, newOrder);
      await redis.set('orderCounter', orderCounter);
      
      let orderMessage = `üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${orderCounter}\n\n`;
      orderMessage += `üë§ –ö–ª–∏–µ–Ω—Ç: ${newOrder.customerName}\n`;
      orderMessage += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${newOrder.customerPhone}\n`;
      orderMessage += `üè† –ê–¥—Ä–µ—Å: ${newOrder.customerAddress}\n`;
      
      if (newOrder.customerComment) {
        orderMessage += `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${newOrder.customerComment}\n`;
      }
      
      orderMessage += `\nüìã –¢–æ–≤–∞—Ä—ã:\n`;
      
      newOrder.items.forEach(item => {
        orderMessage += `- ${item.name} x${item.quantity} = ${item.price * item.quantity} —Ä—É–±.\n`;
      });
      
      orderMessage += `\nüí∞ –ò—Ç–æ–≥–æ: ${newOrder.totalPrice} —Ä—É–±.`;
      
      await bot.telegram.sendMessage(GROUP_ID, orderMessage, {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–±–æ—Ä–∫—É', callback_data: `assemble_${orderCounter}` }]
          ]
        }
      });
      
      await ctx.reply('‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function start() {
  try {
    await initRedis();
    await bot.launch();
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
  }
}

start();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
